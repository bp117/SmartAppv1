import React, { createContext, useState, useEffect, useCallback } from 'react';
import axios from 'axios';

// User interface based on your MongoDB schema
interface User {
  userId: number;
  username: string;
  lanId: string;
  adIamRootGroupId: number;
  adIamSubGroupIds: number[];
  createdBy: string;
  modifiedBy: string;
}

interface UserContextProps {
  users: User[];
  fetchUsers: () => void;
  saveUser: (user: User) => void;
  editUser: (userId: number, updatedUser: User) => void;
  deleteUser: (userId: number) => void;
}

// Create the context with default values
export const UserContext = createContext<UserContextProps>({
  users: [],
  fetchUsers: () => {},
  saveUser: () => {},
  editUser: () => {},
  deleteUser: () => {},
});

export const UserProvider: React.FC = ({ children }) => {
  const [users, setUsers] = useState<User[]>([]);

  const fetchUsers = useCallback(async () => {
    try {
      const response = await axios.get('/api/users');
      setUsers(response.data);
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  }, []);

  const saveUser = useCallback(async (user: User) => {
    try {
      const response = await axios.post('/api/users', user);
      setUsers((prevUsers) => [...prevUsers, response.data]);
    } catch (error) {
      console.error("Error saving user:", error);
    }
  }, []);

  const editUser = useCallback(async (userId: number, updatedUser: User) => {
    try {
      const response = await axios.put(`/api/users/${userId}`, updatedUser);
      setUsers((prevUsers) =>
        prevUsers.map((user) => (user.userId === userId ? response.data : user))
      );
    } catch (error) {
      console.error("Error editing user:", error);
    }
  }, []);

  const deleteUser = useCallback(async (userId: number) => {
    try {
      await axios.delete(`/api/users/${userId}`);
      setUsers((prevUsers) => prevUsers.filter((user) => user.userId !== userId));
    } catch (error) {
      console.error("Error deleting user:", error);
    }
  }, []);

  const contextValue = {
    users,
    fetchUsers,
    saveUser,
    editUser,
    deleteUser,
  };

  return (
    <UserContext.Provider value={contextValue}>
      {children}
    </UserContext.Provider>
  );
};
---new----
import React, { createContext, useState, useCallback } from 'react';
import axios from 'axios';

// User interface based on your schema
interface User {
  userId: number;
  username: string;
  lanId: string;
  adIamRootGroupId: number;
  adIamSubGroupIds: number[];
  createdBy: string;
  modifiedBy: string;
}

interface UserContextProps {
  loggedInUser: User | null;
  setLoggedInUser: React.Dispatch<React.SetStateAction<User | null>>;
  checkUserExistenceAndSave: () => void;
}

export const UserContext = createContext<UserContextProps>({
  loggedInUser: null,
  setLoggedInUser: () => {},
  checkUserExistenceAndSave: () => {},
});

export const UserProvider: React.FC = ({ children }) => {
  const [loggedInUser, setLoggedInUser] = useState<User | null>(null);

  const checkUserExistenceAndSave = useCallback(async () => {
    try {
      const response = await axios.get('/userinfo');
      if (response.data && response.data.user_name) {
        setLoggedInUser(response.data);
        // Here, you should add logic to check if the user exists in your system
        // and make an API call to save the user if they do not exist.
      } else {
        setLoggedInUser(null);
      }
    } catch (error) {
      console.error('Error fetching user info:', error);
      setLoggedInUser(null);
    }
  }, []);

  return (
    <UserContext.Provider value={{ loggedInUser, setLoggedInUser, checkUserExistenceAndSave }}>
      {children}
    </UserContext.Provider>
  );
};
---usage---
import React, { useEffect, useContext } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { UserContext, UserProvider } from './UserContext';
import Chat from './components/Chat';
import Onboarding from './components/Onboarding';
import PromptStudio from './components/PromptStudio';
import UserManagement from './components/UserManagement';
import Unauthorized from './components/Unauthorized';

const App: React.FC = () => {
  const { checkUserExistenceAndSave } = useContext(UserContext);

  useEffect(() => {
    checkUserExistenceAndSave();
  }, [checkUserExistenceAndSave]);

  return (
    <Router>
      <Routes>
        <Route path="/chat" element={<Chat />} />
        <Route path="/onboarding" element={<Onboarding />} />
        <Route path="/prompt-studio" element={<PromptStudio />} />
        <Route path="/user-management" element={<UserManagement />} />
        <Route path="/unauthorized" element={<Unauthorized />} />
        {/* Add other routes as needed */}
      </Routes>
    </Router>
  );
};

const AppWrapper: React.FC = () => {
  return (
    <UserProvider>
      <App />
    </UserProvider>
  );
};

export default AppWrapper;
