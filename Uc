import React, { createContext, useState, useEffect, useCallback } from 'react';
import axios from 'axios';

// User interface based on your MongoDB schema
interface User {
  userId: number;
  username: string;
  lanId: string;
  adIamRootGroupId: number;
  adIamSubGroupIds: number[];
  createdBy: string;
  modifiedBy: string;
}

interface UserContextProps {
  users: User[];
  fetchUsers: () => void;
  saveUser: (user: User) => void;
  editUser: (userId: number, updatedUser: User) => void;
  deleteUser: (userId: number) => void;
}

// Create the context with default values
export const UserContext = createContext<UserContextProps>({
  users: [],
  fetchUsers: () => {},
  saveUser: () => {},
  editUser: () => {},
  deleteUser: () => {},
});

export const UserProvider: React.FC = ({ children }) => {
  const [users, setUsers] = useState<User[]>([]);

  const fetchUsers = useCallback(async () => {
    try {
      const response = await axios.get('/api/users');
      setUsers(response.data);
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  }, []);

  const saveUser = useCallback(async (user: User) => {
    try {
      const response = await axios.post('/api/users', user);
      setUsers((prevUsers) => [...prevUsers, response.data]);
    } catch (error) {
      console.error("Error saving user:", error);
    }
  }, []);

  const editUser = useCallback(async (userId: number, updatedUser: User) => {
    try {
      const response = await axios.put(`/api/users/${userId}`, updatedUser);
      setUsers((prevUsers) =>
        prevUsers.map((user) => (user.userId === userId ? response.data : user))
      );
    } catch (error) {
      console.error("Error editing user:", error);
    }
  }, []);

  const deleteUser = useCallback(async (userId: number) => {
    try {
      await axios.delete(`/api/users/${userId}`);
      setUsers((prevUsers) => prevUsers.filter((user) => user.userId !== userId));
    } catch (error) {
      console.error("Error deleting user:", error);
    }
  }, []);

  const contextValue = {
    users,
    fetchUsers,
    saveUser,
    editUser,
    deleteUser,
  };

  return (
    <UserContext.Provider value={contextValue}>
      {children}
    </UserContext.Provider>
  );
};
