
import React from 'react';
import { Typography, Container, Button, Box, useTheme } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import BlockIcon from '@mui/icons-material/Block'; // Importing an icon for visual appeal

const AccessDenied: React.FC = () => {
  const navigate = useNavigate();
  const theme = useTheme();

  const handleGoHome = () => {
    navigate('/'); // Navigate to the home page
  };

  return (
    <Container maxWidth="md" style={{ textAlign: 'center', marginTop: '100px' }}>
      <Box mb={4} style={{ color: theme.palette.error.main }}>
        <BlockIcon style={{ fontSize: 100 }} />
      </Box>
      <Typography variant="h2" color="error" gutterBottom>
        Access Denied
      </Typography>
      <Typography variant="h5" gutterBottom style={{ marginBottom: '30px' }}>
        Oops! You don't have the permission to view this page.
      </Typography>
      <Button 
        variant="contained" 
        color="primary" 
        onClick={handleGoHome} 
        size="large"
      >
        Go to Home Page
      </Button>
    </Container>
  );
};

export default AccessDenied;


import React, { createContext, useState, useEffect, useCallback } from 'react';
import axios from 'axios';

// User interface based on your MongoDB schema
interface User {
  userId: number;
  username: string;
  lanId: string;
  adIamRootGroupId: number;
  adIamSubGroupIds: number[];
  createdBy: string;
  modifiedBy: string;
}

interface UserContextProps {
  users: User[];
  fetchUsers: () => void;
  saveUser: (user: User) => void;
  editUser: (userId: number, updatedUser: User) => void;
  deleteUser: (userId: number) => void;
}

// Create the context with default values
export const UserContext = createContext<UserContextProps>({
  users: [],
  fetchUsers: () => {},
  saveUser: () => {},
  editUser: () => {},
  deleteUser: () => {},
});

export const UserProvider: React.FC = ({ children }) => {
  const [users, setUsers] = useState<User[]>([]);

  const fetchUsers = useCallback(async () => {
    try {
      const response = await axios.get('/api/users');
      setUsers(response.data);
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  }, []);

  const saveUser = useCallback(async (user: User) => {
    try {
      const response = await axios.post('/api/users', user);
      setUsers((prevUsers) => [...prevUsers, response.data]);
    } catch (error) {
      console.error("Error saving user:", error);
    }
  }, []);

  const editUser = useCallback(async (userId: number, updatedUser: User) => {
    try {
      const response = await axios.put(`/api/users/${userId}`, updatedUser);
      setUsers((prevUsers) =>
        prevUsers.map((user) => (user.userId === userId ? response.data : user))
      );
    } catch (error) {
      console.error("Error editing user:", error);
    }
  }, []);

  const deleteUser = useCallback(async (userId: number) => {
    try {
      await axios.delete(`/api/users/${userId}`);
      setUsers((prevUsers) => prevUsers.filter((user) => user.userId !== userId));
    } catch (error) {
      console.error("Error deleting user:", error);
    }
  }, []);

  const contextValue = {
    users,
    fetchUsers,
    saveUser,
    editUser,
    deleteUser,
  };

  return (
    <UserContext.Provider value={contextValue}>
      {children}
    </UserContext.Provider>
  );
};
---new----
import React, { createContext, useState, useCallback } from 'react';
import axios from 'axios';

// User interface based on your schema
interface User {
  userId: number;
  username: string;
  lanId: string;
  adIamRootGroupId: number;
  adIamSubGroupIds: number[];
  createdBy: string;
  modifiedBy: string;
}

interface UserContextProps {
  loggedInUser: User | null;
  setLoggedInUser: React.Dispatch<React.SetStateAction<User | null>>;
  checkUserExistenceAndSave: () => void;
}

export const UserContext = createContext<UserContextProps>({
  loggedInUser: null,
  setLoggedInUser: () => {},
  checkUserExistenceAndSave: () => {},
});

export const UserProvider: React.FC = ({ children }) => {
  const [loggedInUser, setLoggedInUser] = useState<User | null>(null);

  const checkUserExistenceAndSave = useCallback(async () => {
    try {
      const response = await axios.get('/userinfo');
      if (response.data && response.data.user_name) {
        setLoggedInUser(response.data);
        // Here, you should add logic to check if the user exists in your system
        // and make an API call to save the user if they do not exist.
      } else {
        setLoggedInUser(null);
      }
    } catch (error) {
      console.error('Error fetching user info:', error);
      setLoggedInUser(null);
    }
  }, []);

  return (
    <UserContext.Provider value={{ loggedInUser, setLoggedInUser, checkUserExistenceAndSave }}>
      {children}
    </UserContext.Provider>
  );
};
---usage---
import React, { useEffect, useContext } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { UserContext, UserProvider } from './UserContext';
import Chat from './components/Chat';
import Onboarding from './components/Onboarding';
import PromptStudio from './components/PromptStudio';
import UserManagement from './components/UserManagement';
import Unauthorized from './components/Unauthorized';

const App: React.FC = () => {
  const { checkUserExistenceAndSave } = useContext(UserContext);

  useEffect(() => {
    checkUserExistenceAndSave();
  }, [checkUserExistenceAndSave]);

  return (
    <Router>
      <Routes>
        <Route path="/chat" element={<Chat />} />
        <Route path="/onboarding" element={<Onboarding />} />
        <Route path="/prompt-studio" element={<PromptStudio />} />
        <Route path="/user-management" element={<UserManagement />} />
        <Route path="/unauthorized" element={<Unauthorized />} />
        {/* Add other routes as needed */}
      </Routes>
    </Router>
  );
};

const AppWrapper: React.FC = () => {
  return (
    <UserProvider>
      <App />
    </UserProvider>
  );
};

export default AppWrapper;

import React, { createContext, useState, useCallback, ReactNode } from 'react';
import axios from 'axios';

// User and other interface definitions

interface UserProviderProps {
  children: ReactNode;
}

export const UserContext = createContext</* Your Context Type */>({
  // Default values
});

export const UserProvider: React.FC<UserProviderProps> = ({ children }) => {
  const [loggedInUser, setLoggedInUser] = useState<User | null>(null);
  const [allUsers, setAllUsers] = useState<User[]>([]); // State to store all users

  const fetchAllUsers = useCallback(async () => {
    try {
      const response = await axios.get('/api/users');
      setAllUsers(response.data);
    } catch (error) {
      console.error("Error fetching all users:", error);
    }
  }, []);

  const saveNewUser = useCallback(async (newUser: User) => {
    try {
      await axios.post('/api/users', newUser);
      fetchAllUsers(); // Refresh the user list
    } catch (error) {
      console.error("Error saving new user:", error);
    }
  }, [fetchAllUsers]);

  const checkUserExistenceAndSave = useCallback(async () => {
    try {
      const userInfoResponse = await axios.get('/userinfo');
      if (userInfoResponse.data && userInfoResponse.data.user_name) {
        const fetchedUser: User = /* Map userInfoResponse.data to User */;
        setLoggedInUser(fetchedUser);

        // Check if user exists in allUsers array
        const userExists = allUsers.some(user => user.userId === fetchedUser.userId);
        if (!userExists) {
          saveNewUser(fetchedUser);
        }
      } else {
        setLoggedInUser(null);
      }
    } catch (error) {
      console.error('Error fetching user info:', error);
      setLoggedInUser(null);
    }
  }, [allUsers, saveNewUser]);

  useEffect(() => {
    fetchAllUsers(); // Fetch all users when the app loads
  }, [fetchAllUsers]);

  return (
    <UserContext.Provider value={{ loggedInUser, setLoggedInUser, checkUserExistenceAndSave }}>
      {children}
    </UserContext.Provider>
  );
};

---- Protected Route ----

import React, { useContext } from 'react';
import { Navigate, Route, useLocation } from 'react-router-dom';
import { UserContext } from './UserContext';

const ProtectedRoute = ({ component: Component, ...rest }) => {
  const { loggedInUser } = useContext(UserContext);
  const location = useLocation();

  if (!loggedInUser) {
    // Redirect to unauthorized view or sign-in page
    // Replace '/unauthorized' with the path to your unauthorized or sign-in view
    return <Navigate to="/unauthorized" state={{ from: location }} replace />;
  }

  return <Route {...rest} element={<Component />} />;
};
---unauth----
import React from 'react';
import { Link } from 'react-router-dom';

const Unauthorized: React.FC = () => {
  return (
    <div>
      <h1>Unauthorized Access</h1>
      <p>You are not authorized to view this page. Please <Link to="/signin">sign in</Link>.</p>
    </div>
  );
};

export default Unauthorized;
